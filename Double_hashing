
const int MOD1 = 1e9 + 7;
const int MOD2 = 1e9 + 9;
const int P1 = 31;
const int P2 = 37;
int n = s.size();
    vector<int> pwr1(n + 1, 1), pwr2(n + 1, 1);
    vector<int> hash1(n + 1, 0), hash2(n + 1, 0);

    for (int i = 1; i <= n; i++) {
        pwr1[i] = (pwr1[i - 1] * P1) % MOD1;
        pwr2[i] = (pwr2[i - 1] * P2) % MOD2;
    }

    for (int i = 1; i <= n; i++) {
        hash1[i] = (hash1[i - 1] * P1 + (s[i - 1] - 'a' + 1)) % MOD1;
        hash2[i] = (hash2[i - 1] * P2 + (s[i - 1] - 'a' + 1)) % MOD2;
    }

    auto getHash = [&](int l, int r) {
        int h1 = (hash1[r + 1] - hash1[l] * pwr1[r - l + 1] % MOD1 + MOD1) % MOD1;
        int h2 = (hash2[r + 1] - hash2[l] * pwr2[r - l + 1] % MOD2 + MOD2) % MOD2;
        return make_pair(h1, h2);
    };
